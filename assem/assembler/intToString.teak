// data segment is a list of pointers in .data memory which 
// are null terminated to indicate the end of the array
// symbols here cannot start with $

.data
	hello_world: "Hello World!"
	number: .size 6 // includes null terminator 

// converts a integer into a string.
// Returns a pointer to memory that is the start of the string
// Strings are null terminated
// ** need to define argument registers
// max integer value: (2^16)-1 = 65535

.teak // beginning of assembly code

// if (integer > 65536) “error”

// while (integer > 10000)
//	integer = integer - 10000;
//	ten_thousands++;
// don’t store leading zero’s
// … etc for other decimal places: 1000, 100, 10, 1

// charToStore = value + 48 // offset into decimal chars
// store into memory
// … do for each decimal place (don’t store leading zeros)
// store null terminator at the end

	li    $r8,  2 	// first shift amount
	li    $r9,  7 	// second shift amount
	li    $r10, 127 	// load bottom 7 bits with 1’s
	sll   $r10, $r8 	// shift over two
	ori   $r10, 3 	// set bottom two bits to 1’s, $r1 = 511
	sll   $r10, $r9 	// shift by 7 
	ori   $r10, 127 	// set bottom bits to 1’s, $r3 = 65535

	// now throw error if greater than 65535?

	li    $r9,  8	// shift amount
	li    $r10, 39
	sll   $r10, 8
	ori   $r10, 16	// $r10 = 10000
	
	sub   $r8, $r8
	add   $r8, number // load number base address into $r8

	sub   $ret, $ret // zero out $ret

k10:	comp  $r0,  $r10 // $r0 - $r10, $r0 <? 10000
	bl    k10n
	addi  $ret, 1
	jl    k10
k10n:	addi  $ret, 48 // get ascii code
	write $ret, $r8 // store ascii code into number address
	addi $r8, 1


	


